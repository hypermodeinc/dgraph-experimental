name: Test and Build CSV to Knowledge Graph

permissions:
  contents: read
  packages: write
  actions: read

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - csv-to-knowledge-graph/**
      - .github/actions/csv-to-kg/**
      - .github/workflows/csv-to-kg.yml
  pull_request:
    branches: [main]
    paths:
      - csv-to-knowledge-graph/**
      - .github/actions/csv-to-kg/**
      - .github/workflows/csv-to-kg.yml

env:
  MODUS_DIR: ""

jobs:
  build-all:
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./csv-to-knowledge-graph
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/csv-to-kg
      - name: Build All
        run: pnpm build

  package-tests:
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-latest
    needs: build-all
    defaults:
      run:
        working-directory: ./csv-to-knowledge-graph
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/csv-to-kg
      - name: Build Packages
        run: pnpm build:packages
      - name: Test Packages
        run: pnpm test:packages

  integration-tests:
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-latest
    needs: build-all
    defaults:
      run:
        working-directory: ./csv-to-knowledge-graph
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/csv-to-kg
      - name: Build Packages
        run: pnpm build:packages
      - name: Setup Dgraph
        run: |
          # Create directory for Dgraph data
          mkdir -p ~/csv_graph

          # Ensure Docker Compose is installed
          docker compose --version

          # Start Dgraph using the existing docker compose file
          docker compose up -d

          # Wait for Dgraph to be ready
          echo "Waiting for Dgraph to start..."

          # Retry health check up to 10 times with 5 second intervals
          for i in {1..10}; do
            if curl -s localhost:8080/health > /dev/null; then
              echo "Dgraph is ready!"
              break
            fi
            
            if [ $i -eq 10 ]; then
              echo "Dgraph failed to start. Showing logs:"
              docker compose logs
              exit 1
            fi
            
            echo "Waiting for Dgraph to be ready (attempt $i/10)..."
            sleep 5
          done

          # Wait for Dgraph to be ready (adjust sleep time as needed)
          echo "Waiting for Dgraph to start..."
          sleep 30

          # Verify Dgraph is running
          curl -s localhost:8080/health || (docker compose logs && exit 1)

      - name: Test Integration
        run: pnpm test:integration

      - name: Cleanup Dgraph
        if: always()
        run: |
          echo "Stopping Dgraph containers..."
          docker compose down
          echo "Dgraph containers stopped."

  modus-build:
    name: modus build
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set Modus directory
        run: |
          echo "MODUS_DIR=./csv-to-knowledge-graph/modus" >> "$GITHUB_ENV"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup Go
        uses: actions/setup-go@v5

      - name: Setup TinyGo
        uses: acifani/setup-tinygo@v2
        with:
          tinygo-version: 0.34.0

      - name: Build project
        run: npx -p @hypermode/modus-cli -y modus build
        working-directory: ${{ env.MODUS_DIR }}
        shell: bash
